from django.urls import reverse, path, include
from django.views import generic as GV
from django.conf import settings
from django.urls import reverse

class AppView():
    model = None
    previous_module = None                              # MUST be changed to inheritance mode if possible
    module_name = ''                                    # Name used to refer in urls and directories
    slug_field = 'random_slug'                          # Field to filter object by
    slug_url_kwarg = ''                                 # Slug name in url kwargs
    views_redirected_to_detail = ['create', 'update']   # Views in module that must be redirected to detail view
    forms = None                                        # forms module, form names must match views names
    include_in_breadcrumb = True                        # Decide to include or not in breadcrumb
    generate_breadcrumb = True
    extra_index_fields = {}                             # Fields to show in default index template
    include_object_index = False
    include_detail_fields = False
    include_perms = True
    excluded_detail_fields = ['id', 'random_slug']
    proxy_name = None                                   # Treat view as this name, ex: If you have multiple creates you could use proxy_name=Create in both
    include_common_urls = True                          # Include generic urls in context data (create for index, update and delete for detail)
    breadcrumb_name = None                              # Choose a different name to display in breadcrumb, set None to use autogenerated
    index_breadcrumb_name = None
    templates_root = None                               # Choose a different root for templates, set None to use autogenerated
    skip_detail = False                                 # Set True to skip detail url contruction, presence in breadcrumb and success redirect
    skip_index = False                                  # Set True to skip index url contruction, presence in breadcrumb and success redirect

    default_templates_root = settings.DEFAULT_TEMPLATES_ROOT if hasattr(settings, 'DEFAULT_TEMPLATES_ROOT') else ''
    form_default_template = '_base_form.html'
    delete_default_template = '_base_delete.html'
    index_default_template = '_base_index.html'
    detail_default_template = '_base_detail.html'

    # ======================== GENERAL ================================
    def get_class_name(self, lower=True):
        if self.proxy_name:
            name = self.proxy_name
        else:
            name = type(self).__name__
        if lower:
            return name.lower()
        return name
    # =================== TEMPLATE =======================
    def get_root(self, separator):
        root = ''
        if self.previous_module:
            root += self.previous_module().get_root(separator)
        root += self.module_name + separator
        return root

    def get_default_template(self, name):
        if 'create' in name or 'update' in name:
            return self.default_templates_root + self.form_default_template
        if 'delete' in name:
            return self.default_templates_root + self.delete_default_template
        if 'index' in name:
            return self.default_templates_root + self.index_default_template
        if 'detail' in name:
            return self.default_templates_root + self.detail_default_template

    def get_template_names(self):
        name = self.get_class_name()
        if self.template_name is None:
            if self.templates_root is None:
                root = self.get_root('/')
            else:
                root = self.templates_root
            return ['{}{}.html'.format(root, name ), self.get_default_template(name)]
        return [self.template_name]

    # ========================== URLS ====================

    def get_url_kwargs(self, view):
        kwargs = {}
        if self.previous_module:
            previous_module_instance = self.previous_module()
            kwargs = previous_module_instance.get_url_kwargs(view)
        if hasattr(self,'model'):
            slug_name = self.slug_url_kwarg
            view_kwargs = view.kwargs
            if slug_name in view_kwargs.keys():
                kwargs.update({
                    slug_name:view_kwargs.get(slug_name),
                })
        return kwargs

    def get_detail_url(self, view, object=None, name='detail'):
        if self.skip_detail:
            return self.get_index_url(view)
        kwargs = self.get_url_kwargs(view)
        if (object==None) and hasattr(self, 'object'):
            object = self.object
        if object:
            kwargs.update({
                self.slug_url_kwarg: object.identifier
            })
        path = self.get_root(':') + name
        return reverse(path, kwargs=kwargs)

    def get_index_url(self, view, name='index'):
        if self.skip_index:
            return self.previous_module().get_detail_url(view)
        path = self.get_root(':') + name
        kwargs = self.get_url_kwargs(view)
        if self.slug_url_kwarg in kwargs.keys():
            del kwargs[self.slug_url_kwarg]
        return reverse(path, kwargs=kwargs)

    def get_success_url(self):
        if self.get_class_name() in self.views_redirected_to_detail:
            return self.get_detail_url(self)
        return self.get_index_url(self)
    # =========================== FORMS =====================================
    def get_form_class(self):
        try:
            if super().get_form_class():
                return super().get_form_class()
        except Exception as e:
            print(e)
            print(self.forms)
        return getattr(self.forms, self.get_class_name(lower=False))

    def form_valid(self, form):
        objects = self.get_kwargs_objects(self)
        model_name = self.model.__name__.lower()
        if model_name in objects.keys():
            del objects[model_name]
        for key in objects.keys():
            setattr(form.instance, key, objects.get(key))
        return super().form_valid(form)

    # ========================== FILTER QS ===============================
    def get_queryset(self):
        qs = super().get_queryset()
        objects = self.get_kwargs_objects(self)
        model_name = self.model.__name__.lower()
        if model_name in objects.keys():
            del objects[model_name]
        sample = qs.first()
        keys = list(objects.keys())
        for k in keys:
            if not hasattr(sample, k):
                del objects[k]
        return qs.filter(**objects)

    # ========================== BREADCRUMB ====================
    def get_breadcrumb_name(self):
        if self.breadcrumb_name:
            return self.breadcrumb_name
        name = self.get_class_name()
        if 'create'in name:
            return 'Nuevo'
        if 'update'in name:
            return 'Editar'
        if 'delete'in name:
            return 'Eliminar'
        if 'detail'in name:
            return self.object

    def get_bc_object(self,view):
        slug_name = self.slug_url_kwarg
        return self.model.objects.get(**{self.slug_field: view.kwargs.get(slug_name)})

    def get_breadcrumb(self, view):
        breadcrumb = []
        if self.previous_module:
            previous_module = self.previous_module()
            if previous_module.include_in_breadcrumb:
                breadcrumb = previous_module.get_breadcrumb(view)

        if not self.skip_index:
            ib_name = self.index_breadcrumb_name if self.index_breadcrumb_name else self.model._meta.verbose_name_plural
            breadcrumb.append([self.get_index_url(view), ib_name])
        name = self.get_class_name()

        if  self!=view and (not self.skip_detail):
            breadcrumb.append([self.get_detail_url(view), self.get_bc_object(view)])

        if self==view and ('index' not in name):
            if (('update'in name) or ('delete' in name)):
                breadcrumb.append([self.get_detail_url(view), self.get_bc_object(view)])
            breadcrumb.append(['',self.get_breadcrumb_name()])
        return breadcrumb
    # ========================== PERMS ====================
    def get_perms(self):
        user = self.request.user
        model_name = self.model.__name__.lower()
        app_label = self.model._meta.app_label
        return {
            'can_create': user.has_perm('{}.{}_{}'.format(app_label, 'add', model_name)),
            'can_update': user.has_perm('{}.{}_{}'.format(app_label, 'change', model_name)),
            'can_delete': user.has_perm('{}.{}_{}'.format(app_label, 'delete', model_name)),
        }


    # ========================== CONTEXT ====================
    def get_kwargs_objects(self, view):
        objects = {}
        if self.previous_module:
            previous_module_instance = self.previous_module()
            objects = previous_module_instance.get_kwargs_objects(view)
        if self.model:
            model = self.model
            model_name = model.__name__.lower()
            slug_name = self.slug_url_kwarg
            view_kwargs = view.kwargs
            if slug_name in view_kwargs.keys():
                objects.update({
                    model_name: model.objects.get(**{self.slug_field:view_kwargs.get(slug_name)}),
                })
        return objects

    def get_index_object_list(self, view, object_list):
        column_names = [self.model._meta.verbose_name]
        objects = []
        for name in self.extra_index_fields.keys():
            column_names.append(name)
        for object in object_list:
            object_data = [[object, self.get_detail_url(self, object)]]
            for name in self.extra_index_fields.keys():
                value = object
                attributes = self.extra_index_fields.get(name).split('.')
                for att in attributes:
                    value = getattr(value, att)
                object_data.append(value)
            objects.append(object_data)

        return {'columns': column_names, 'objects': objects}

    def get_detail_fields(self):
        fields = {}
        for field in self.model._meta.get_fields():
            if field.name not in self.excluded_detail_fields:
                if hasattr(self.object, field.name) and hasattr(field, 'verbose_name'):
                    fields[field.verbose_name] = getattr(self.object, field.name)
        return fields

    def get_context_data(self, *args, **kwargs):
        context = super().get_context_data(*args, **kwargs)
        context.update({
            'model_name': self.model._meta.verbose_name_plural if self.model else '',

            **self.get_kwargs_objects(self),
        })

        if self.include_perms:
            context.update(self.get_perms())

        if self.include_object_index:
            context.update({
                'index_object_list': self.get_index_object_list(self, context.get('object_list', [])),
            })

        if self.include_detail_fields and ('detail' in self.get_class_name()):
            context.update({
                'fields': self.get_detail_fields(),
            })

        if self.generate_breadcrumb:
            context.update({
                'breadcrumb': self.get_breadcrumb(self),
            })

        if self.include_common_urls:
            if 'detail' in self.get_class_name():
                context.update({
                    'update_url': self.get_detail_url(self, name='update'),
                    'delete_url': self.get_detail_url(self, name='delete'),
                })
            if 'index' in self.get_class_name():
                context.update({
                    'create_url': self.get_index_url(self, name='create'),
                })
        return context

    #=================================== VIEW GENERATOR ==========================
    @classmethod
    def build_view(cls, name):
        prefix = name.lower() + '__'
        # methods = filter(lambda m: prefix in m, dir(cls))
        methods = [m for m in dir(cls) if prefix in m]
        # methods_dict = {method_name.replace(prefix, '') : getattr(cls, method_name) for method_name in methods}
        methods_dict = {}
        for method_name in methods:
            methods_dict[method_name.replace(prefix, '')] = getattr(cls, method_name)


        generic_name = 'List' if name=='Index' else name
        generic_view = getattr(GV, generic_name + 'View')
        return type(name, (cls, generic_view), methods_dict)

    @classmethod
    def get_view(cls, name):
        return cls.build_view(name).as_view()

    @classmethod
    def build_urls(cls, object_specific_urls=[]):
        slug_field_url = '<slug:{}>/'.format(cls.slug_url_kwarg)
        object_specific_urls = object_specific_urls + [
            path('editar/', cls.get_view('Update'), name='update'),
            path('borrar/', cls.get_view('Delete'), name='delete'),
        ]

        if not cls.skip_detail:
            object_specific_urls.append(path('', cls.get_view('Detail'), name='detail'))

        urlpatterns = [
            path('crear/', cls.get_view('Create'), name='create'),
        ]

        if not cls.skip_index:
            urlpatterns.append(path('', cls.get_view('Index'), name='index'))

        urlpatterns.append(path(slug_field_url, include(object_specific_urls)))
        return urlpatterns



